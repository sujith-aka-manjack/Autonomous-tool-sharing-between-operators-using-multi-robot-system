// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_step.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_time_5fstep_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_time_5fstep_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_time_5fstep_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_time_5fstep_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_5fstep_2eproto;
class Robot;
struct RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class Robot_Position;
struct Robot_PositionDefaultTypeInternal;
extern Robot_PositionDefaultTypeInternal _Robot_Position_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TimeStep;
struct TimeStepDefaultTypeInternal;
extern TimeStepDefaultTypeInternal _TimeStep_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Robot* Arena::CreateMaybeMessage<::Robot>(Arena*);
template<> ::Robot_Position* Arena::CreateMaybeMessage<::Robot_Position>(Arena*);
template<> ::Task* Arena::CreateMaybeMessage<::Task>(Arena*);
template<> ::TimeStep* Arena::CreateMaybeMessage<::TimeStep>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Robot_State : int {
  Robot_State_FOLLOWER = 0,
  Robot_State_LEADER = 1,
  Robot_State_CONNECTOR = 2,
  Robot_State_TRAVELER = 3,
  Robot_State_Robot_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Robot_State_Robot_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Robot_State_IsValid(int value);
constexpr Robot_State Robot_State_State_MIN = Robot_State_FOLLOWER;
constexpr Robot_State Robot_State_State_MAX = Robot_State_TRAVELER;
constexpr int Robot_State_State_ARRAYSIZE = Robot_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_State_descriptor();
template<typename T>
inline const std::string& Robot_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Robot_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Robot_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Robot_State_descriptor(), enum_t_value);
}
inline bool Robot_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Robot_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Robot_State>(
    Robot_State_descriptor(), name, value);
}
// ===================================================================

class TimeStep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimeStep) */ {
 public:
  inline TimeStep() : TimeStep(nullptr) {}
  ~TimeStep() override;
  explicit constexpr TimeStep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeStep(const TimeStep& from);
  TimeStep(TimeStep&& from) noexcept
    : TimeStep() {
    *this = ::std::move(from);
  }

  inline TimeStep& operator=(const TimeStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStep& operator=(TimeStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeStep* internal_default_instance() {
    return reinterpret_cast<const TimeStep*>(
               &_TimeStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeStep& a, TimeStep& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeStep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeStep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimeStep& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimeStep";
  }
  protected:
  explicit TimeStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsFieldNumber = 2,
    kTasksFieldNumber = 3,
    kTimeFieldNumber = 1,
  };
  // repeated .Robot robots = 2;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::Robot* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >*
      mutable_robots();
  private:
  const ::Robot& _internal_robots(int index) const;
  ::Robot* _internal_add_robots();
  public:
  const ::Robot& robots(int index) const;
  ::Robot* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >&
      robots() const;

  // repeated .Task tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Task >*
      mutable_tasks();
  private:
  const ::Task& _internal_tasks(int index) const;
  ::Task* _internal_add_tasks();
  public:
  const ::Task& tasks(int index) const;
  ::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Task >&
      tasks() const;

  // uint64 time = 1;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TimeStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot > robots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Task > tasks_;
  uint64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_time_5fstep_2eproto;
};
// -------------------------------------------------------------------

class Robot_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot.Position) */ {
 public:
  inline Robot_Position() : Robot_Position(nullptr) {}
  ~Robot_Position() override;
  explicit constexpr Robot_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Robot_Position(const Robot_Position& from);
  Robot_Position(Robot_Position&& from) noexcept
    : Robot_Position() {
    *this = ::std::move(from);
  }

  inline Robot_Position& operator=(const Robot_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot_Position& operator=(Robot_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Robot_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Robot_Position* internal_default_instance() {
    return reinterpret_cast<const Robot_Position*>(
               &_Robot_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Robot_Position& a, Robot_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Robot_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Robot_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Robot_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Robot_Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Robot.Position";
  }
  protected:
  explicit Robot_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:Robot.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_time_5fstep_2eproto;
};
// -------------------------------------------------------------------

class Robot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {}
  ~Robot() override;
  explicit constexpr Robot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Robot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Robot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Robot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Robot_Position Position;

  typedef Robot_State State;
  static constexpr State FOLLOWER =
    Robot_State_FOLLOWER;
  static constexpr State LEADER =
    Robot_State_LEADER;
  static constexpr State CONNECTOR =
    Robot_State_CONNECTOR;
  static constexpr State TRAVELER =
    Robot_State_TRAVELER;
  static inline bool State_IsValid(int value) {
    return Robot_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Robot_State_State_MIN;
  static constexpr State State_MAX =
    Robot_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Robot_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Robot_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Robot_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Robot_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kActionFieldNumber = 7,
    kPositionFieldNumber = 4,
    kTeamIDFieldNumber = 2,
    kTotalSentFieldNumber = 5,
    kTotalReceivedFieldNumber = 6,
    kStateFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string action = 7;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .Robot.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Robot_Position& position() const;
  PROTOBUF_NODISCARD ::Robot_Position* release_position();
  ::Robot_Position* mutable_position();
  void set_allocated_position(::Robot_Position* position);
  private:
  const ::Robot_Position& _internal_position() const;
  ::Robot_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Robot_Position* position);
  ::Robot_Position* unsafe_arena_release_position();

  // uint64 teamID = 2;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // optional uint64 totalSent = 5;
  bool has_totalsent() const;
  private:
  bool _internal_has_totalsent() const;
  public:
  void clear_totalsent();
  uint64_t totalsent() const;
  void set_totalsent(uint64_t value);
  private:
  uint64_t _internal_totalsent() const;
  void _internal_set_totalsent(uint64_t value);
  public:

  // optional uint64 totalReceived = 6;
  bool has_totalreceived() const;
  private:
  bool _internal_has_totalreceived() const;
  public:
  void clear_totalreceived();
  uint64_t totalreceived() const;
  void set_totalreceived(uint64_t value);
  private:
  uint64_t _internal_totalreceived() const;
  void _internal_set_totalreceived(uint64_t value);
  public:

  // .Robot.State state = 3;
  void clear_state();
  ::Robot_State state() const;
  void set_state(::Robot_State value);
  private:
  ::Robot_State _internal_state() const;
  void _internal_set_state(::Robot_State value);
  public:

  // @@protoc_insertion_point(class_scope:Robot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::Robot_Position* position_;
  uint64_t teamid_;
  uint64_t totalsent_;
  uint64_t totalreceived_;
  int state_;
  friend struct ::TableStruct_time_5fstep_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDemandFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 demand = 2;
  void clear_demand();
  uint64_t demand() const;
  void set_demand(uint64_t value);
  private:
  uint64_t _internal_demand() const;
  void _internal_set_demand(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t demand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_time_5fstep_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeStep

// uint64 time = 1;
inline void TimeStep::clear_time() {
  time_ = uint64_t{0u};
}
inline uint64_t TimeStep::_internal_time() const {
  return time_;
}
inline uint64_t TimeStep::time() const {
  // @@protoc_insertion_point(field_get:TimeStep.time)
  return _internal_time();
}
inline void TimeStep::_internal_set_time(uint64_t value) {
  
  time_ = value;
}
inline void TimeStep::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TimeStep.time)
}

// repeated .Robot robots = 2;
inline int TimeStep::_internal_robots_size() const {
  return robots_.size();
}
inline int TimeStep::robots_size() const {
  return _internal_robots_size();
}
inline void TimeStep::clear_robots() {
  robots_.Clear();
}
inline ::Robot* TimeStep::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:TimeStep.robots)
  return robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >*
TimeStep::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:TimeStep.robots)
  return &robots_;
}
inline const ::Robot& TimeStep::_internal_robots(int index) const {
  return robots_.Get(index);
}
inline const ::Robot& TimeStep::robots(int index) const {
  // @@protoc_insertion_point(field_get:TimeStep.robots)
  return _internal_robots(index);
}
inline ::Robot* TimeStep::_internal_add_robots() {
  return robots_.Add();
}
inline ::Robot* TimeStep::add_robots() {
  ::Robot* _add = _internal_add_robots();
  // @@protoc_insertion_point(field_add:TimeStep.robots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Robot >&
TimeStep::robots() const {
  // @@protoc_insertion_point(field_list:TimeStep.robots)
  return robots_;
}

// repeated .Task tasks = 3;
inline int TimeStep::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TimeStep::tasks_size() const {
  return _internal_tasks_size();
}
inline void TimeStep::clear_tasks() {
  tasks_.Clear();
}
inline ::Task* TimeStep::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:TimeStep.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Task >*
TimeStep::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:TimeStep.tasks)
  return &tasks_;
}
inline const ::Task& TimeStep::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::Task& TimeStep::tasks(int index) const {
  // @@protoc_insertion_point(field_get:TimeStep.tasks)
  return _internal_tasks(index);
}
inline ::Task* TimeStep::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::Task* TimeStep::add_tasks() {
  ::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:TimeStep.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Task >&
TimeStep::tasks() const {
  // @@protoc_insertion_point(field_list:TimeStep.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// Robot_Position

// double x = 1;
inline void Robot_Position::clear_x() {
  x_ = 0;
}
inline double Robot_Position::_internal_x() const {
  return x_;
}
inline double Robot_Position::x() const {
  // @@protoc_insertion_point(field_get:Robot.Position.x)
  return _internal_x();
}
inline void Robot_Position::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Robot_Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Robot.Position.x)
}

// double y = 2;
inline void Robot_Position::clear_y() {
  y_ = 0;
}
inline double Robot_Position::_internal_y() const {
  return y_;
}
inline double Robot_Position::y() const {
  // @@protoc_insertion_point(field_get:Robot.Position.y)
  return _internal_y();
}
inline void Robot_Position::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Robot_Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Robot.Position.y)
}

// -------------------------------------------------------------------

// Robot

// string name = 1;
inline void Robot::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Robot::name() const {
  // @@protoc_insertion_point(field_get:Robot.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Robot::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Robot.name)
}
inline std::string* Robot::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Robot.name)
  return _s;
}
inline const std::string& Robot::_internal_name() const {
  return name_.Get();
}
inline void Robot::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Robot::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Robot::release_name() {
  // @@protoc_insertion_point(field_release:Robot.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Robot::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Robot.name)
}

// uint64 teamID = 2;
inline void Robot::clear_teamid() {
  teamid_ = uint64_t{0u};
}
inline uint64_t Robot::_internal_teamid() const {
  return teamid_;
}
inline uint64_t Robot::teamid() const {
  // @@protoc_insertion_point(field_get:Robot.teamID)
  return _internal_teamid();
}
inline void Robot::_internal_set_teamid(uint64_t value) {
  
  teamid_ = value;
}
inline void Robot::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Robot.teamID)
}

// .Robot.State state = 3;
inline void Robot::clear_state() {
  state_ = 0;
}
inline ::Robot_State Robot::_internal_state() const {
  return static_cast< ::Robot_State >(state_);
}
inline ::Robot_State Robot::state() const {
  // @@protoc_insertion_point(field_get:Robot.state)
  return _internal_state();
}
inline void Robot::_internal_set_state(::Robot_State value) {
  
  state_ = value;
}
inline void Robot::set_state(::Robot_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Robot.state)
}

// .Robot.Position position = 4;
inline bool Robot::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Robot::has_position() const {
  return _internal_has_position();
}
inline void Robot::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Robot_Position& Robot::_internal_position() const {
  const ::Robot_Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Robot_Position&>(
      ::_Robot_Position_default_instance_);
}
inline const ::Robot_Position& Robot::position() const {
  // @@protoc_insertion_point(field_get:Robot.position)
  return _internal_position();
}
inline void Robot::unsafe_arena_set_allocated_position(
    ::Robot_Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Robot.position)
}
inline ::Robot_Position* Robot::release_position() {
  
  ::Robot_Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Robot_Position* Robot::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Robot.position)
  
  ::Robot_Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Robot_Position* Robot::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Robot_Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Robot_Position* Robot::mutable_position() {
  ::Robot_Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Robot.position)
  return _msg;
}
inline void Robot::set_allocated_position(::Robot_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Robot_Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Robot.position)
}

// optional uint64 totalSent = 5;
inline bool Robot::_internal_has_totalsent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Robot::has_totalsent() const {
  return _internal_has_totalsent();
}
inline void Robot::clear_totalsent() {
  totalsent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Robot::_internal_totalsent() const {
  return totalsent_;
}
inline uint64_t Robot::totalsent() const {
  // @@protoc_insertion_point(field_get:Robot.totalSent)
  return _internal_totalsent();
}
inline void Robot::_internal_set_totalsent(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  totalsent_ = value;
}
inline void Robot::set_totalsent(uint64_t value) {
  _internal_set_totalsent(value);
  // @@protoc_insertion_point(field_set:Robot.totalSent)
}

// optional uint64 totalReceived = 6;
inline bool Robot::_internal_has_totalreceived() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Robot::has_totalreceived() const {
  return _internal_has_totalreceived();
}
inline void Robot::clear_totalreceived() {
  totalreceived_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Robot::_internal_totalreceived() const {
  return totalreceived_;
}
inline uint64_t Robot::totalreceived() const {
  // @@protoc_insertion_point(field_get:Robot.totalReceived)
  return _internal_totalreceived();
}
inline void Robot::_internal_set_totalreceived(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  totalreceived_ = value;
}
inline void Robot::set_totalreceived(uint64_t value) {
  _internal_set_totalreceived(value);
  // @@protoc_insertion_point(field_set:Robot.totalReceived)
}

// optional string action = 7;
inline bool Robot::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Robot::has_action() const {
  return _internal_has_action();
}
inline void Robot::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Robot::action() const {
  // @@protoc_insertion_point(field_get:Robot.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Robot::set_action(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Robot.action)
}
inline std::string* Robot::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:Robot.action)
  return _s;
}
inline const std::string& Robot::_internal_action() const {
  return action_.Get();
}
inline void Robot::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Robot::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Robot::release_action() {
  // @@protoc_insertion_point(field_release:Robot.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = action_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Robot::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Robot.action)
}

// -------------------------------------------------------------------

// Task

// string name = 1;
inline void Task::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:Task.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Task.name)
}
inline std::string* Task::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Task.name)
  return _s;
}
inline const std::string& Task::_internal_name() const {
  return name_.Get();
}
inline void Task::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:Task.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Task.name)
}

// uint64 demand = 2;
inline void Task::clear_demand() {
  demand_ = uint64_t{0u};
}
inline uint64_t Task::_internal_demand() const {
  return demand_;
}
inline uint64_t Task::demand() const {
  // @@protoc_insertion_point(field_get:Task.demand)
  return _internal_demand();
}
inline void Task::_internal_set_demand(uint64_t value) {
  
  demand_ = value;
}
inline void Task::set_demand(uint64_t value) {
  _internal_set_demand(value);
  // @@protoc_insertion_point(field_set:Task.demand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Robot_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Robot_State>() {
  return ::Robot_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_time_5fstep_2eproto
